import gleam/dynamic
import gleam/int
import gleam/io
import gleam/list
import gleam/string
import lustre
import lustre/attribute
import lustre/effect
import lustre/element
import lustre/element/html
import lustre/event
import lustre_http

pub fn main() {
  let app = lustre.application(init, update, view)
  let assert Ok(_) = lustre.start(app, "#app", Nil)

  Nil
}

pub type Model {
  Model(count: Int, cat: Cat, loader: Bool)
}

pub type Cat {
  Cat(id: String, tags: List(String))
}

fn init(_flags) -> #(Model, effect.Effect(Msg)) {
  #(Model(0, Cat("", [""]), False), effect.none())
}

pub type Msg {
  UserGetCat
  Increment
  Decrement(x: Int)
  UserClearCat
  ApiReturnedCat(Result(Cat, lustre_http.HttpError))
}

pub fn update(model: Model, msg: Msg) -> #(Model, effect.Effect(Msg)) {
  case msg {
    UserGetCat -> #(Model(..model, loader: True), get_cat())
    UserClearCat -> #(Model(..model, cat: Cat("cleared", [""])), effect.none())
    ApiReturnedCat(Ok(cat)) -> {
      io.debug(cat)
      case cat.tags {
        [] -> #(model, get_cat())
        _ -> #(Model(..model, cat: cat, loader: False), effect.none())
      }
    }
    ApiReturnedCat(Error(err)) -> {
      io.debug(err)
      #(model, effect.none())
    }
    Increment -> #(Model(..model, count: model.count + 42), effect.none())
    Decrement(x) -> #(Model(..model, count: model.count - x), effect.none())
  }
}

fn get_cat() -> effect.Effect(Msg) {
  let decoder =
    dynamic.decode2(
      Cat,
      dynamic.field("_id", dynamic.string),
      dynamic.field("tags", dynamic.list(dynamic.string)),
    )
  let expect = lustre_http.expect_json(decoder, ApiReturnedCat)

  lustre_http.get("https://cataas.com/cat?json=true", expect)
}

pub fn view(model: Model) -> element.Element(Msg) {
  let count = int.to_string(model.count)
  html.div([], [
    html.h1([], [element.text("Element generated by gleam using lustre")]),
    html.div([attribute.class("flex mb-2")], [
      html.button(
        [event.on_click(Increment), attribute.class("btn variant-filled")],
        [element.text("+")],
      ),
      html.div([attribute.class("p-1")], [element.text(count)]),
      html.button(
        [event.on_click(Decrement(10)), attribute.class("btn variant-filled")],
        [element.text("-")],
      ),
      html.button(
        [event.on_click(UserGetCat), attribute.class("ml-1 btn variant-filled")],
        [element.text("get cat")],
      ),
      html.button(
        [
          event.on_click(UserClearCat),
          attribute.class("ml-1 btn variant-filled"),
        ],
        [element.text("clear cat")],
      ),
    ]),
    html.div([], [
      case model.cat.id {
        "" -> html.text("no cat yet")
        "cleared" -> html.text("cat cleared")
        id -> {
          // check loader
          case model.loader {
            True -> html.text("loading...")
            False ->
              html.div([], [
                html.img([attribute.src("https://cataas.com/cat/" <> id)]),
                element.text(string.join(model.cat.tags, " ")),
              ])
          }
        }
      },
    ]),
  ])
}
